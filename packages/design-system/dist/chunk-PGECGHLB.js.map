{"version":3,"sources":["../src/components/Button/Button.tsx","../src/hooks/useTokens.ts","../src/utils/mockTokenManager.ts"],"names":["useEffect"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useTokens } from '../../hooks/useTokens';\n\nexport type ButtonVariant = 'primary' | 'secondary' | 'tertiary' | 'ghost';\nexport type ButtonSize = 'small' | 'medium' | 'large';\n\ninterface StyledButtonProps {\n  $fullWidth?: boolean;\n  $variant: ButtonVariant;\n  $size: ButtonSize;\n}\n\nexport interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: ButtonVariant;\n  size?: ButtonSize;\n  fullWidth?: boolean;\n}\n\nconst StyledButton = styled.button<StyledButtonProps>`\n  position: relative;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-family: inherit;\n  font-weight: 500;\n  transition: all 0.2s ease;\n  width: ${props => props.$fullWidth ? '100%' : 'auto'};\n  padding: ${props => {\n    switch (props.$size) {\n      case 'small': return '8px 16px';\n      case 'large': return '16px 24px';\n      default: return '12px 20px';\n    }\n  }};\n  font-size: ${props => {\n    switch (props.$size) {\n      case 'small': return '14px';\n      case 'large': return '18px';\n      default: return '16px';\n    }\n  }};\n\n  ${props => {\n    switch (props.$variant) {\n      case 'primary':\n        return `\n          background: #0066FF;\n          color: #FFFFFF;\n          &:hover:not(:disabled) {\n            background: #0052CC;\n          }\n        `;\n      case 'secondary':\n        return `\n          background: #F5F5F5;\n          color: #333333;\n          &:hover:not(:disabled) {\n            background: #E5E5E5;\n          }\n        `;\n      case 'tertiary':\n        return `\n          background: transparent;\n          color: #0066FF;\n          border: 1px solid #0066FF;\n          &:hover:not(:disabled) {\n            background: #F0F7FF;\n          }\n        `;\n      case 'ghost':\n        return `\n          background: transparent;\n          color: #666666;\n          &:hover:not(:disabled) {\n            background: #F5F5F5;\n          }\n        `;\n      default:\n        return '';\n    }\n  }}\n\n  &:disabled {\n    cursor: not-allowed;\n    opacity: 0.6;\n  }\n`;\n\ninterface ButtonTokens {\n  variants: {\n    [key in ButtonVariant]: {\n      background: string;\n      color: string;\n      hover: {\n        background: string;\n      };\n      border?: string;\n      borderColor?: string;\n    };\n  };\n  sizes: {\n    [key in ButtonSize]: {\n      padding: string;\n      fontSize: string;\n    };\n  };\n}\n\nexport const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ variant = 'primary', size = 'medium', fullWidth, children, ...props }, ref) => {\n    const buttonRef = useRef<HTMLButtonElement>(null);\n    const finalRef = (ref as React.RefObject<HTMLButtonElement>) || buttonRef;\n    \n    const tokens = useTokens<ButtonTokens>('button', {\n      variants: {\n        primary: {\n          background: '#0066FF',\n          color: '#FFFFFF',\n          hover: {\n            background: '#0052CC'\n          }\n        },\n        secondary: {\n          background: '#F5F5F5',\n          color: '#333333',\n          hover: {\n            background: '#E5E5E5'\n          }\n        },\n        tertiary: {\n          background: 'transparent',\n          color: '#0066FF',\n          border: '1px solid',\n          borderColor: '#0066FF',\n          hover: {\n            background: '#F0F7FF'\n          }\n        },\n        ghost: {\n          background: 'transparent',\n          color: '#666666',\n          hover: {\n            background: '#F5F5F5'\n          }\n        }\n      },\n      sizes: {\n        small: {\n          padding: '8px 16px',\n          fontSize: '14px'\n        },\n        medium: {\n          padding: '12px 20px',\n          fontSize: '16px'\n        },\n        large: {\n          padding: '16px 24px',\n          fontSize: '18px'\n        }\n      }\n    });\n\n    useEffect(() => {\n      if (!finalRef.current) return;\n\n      const button = finalRef.current;\n      const variantTokens = tokens.variants[variant];\n      const sizeTokens = tokens.sizes[size];\n\n      // Apply tokens directly to DOM for better performance\n      Object.entries(variantTokens).forEach(([prop, value]) => {\n        if (prop === 'hover') return;\n        if (typeof value === 'string') {\n          button.style.setProperty(`--button-${prop}`, value);\n        }\n      });\n\n      Object.entries(sizeTokens).forEach(([prop, value]) => {\n        if (typeof value === 'string') {\n          button.style.setProperty(`--button-${prop}`, value);\n        }\n      });\n\n      // Handle hover state\n      const hoverStyles = variantTokens.hover;\n      const originalStyles = Object.entries(variantTokens).reduce((acc, [prop, value]) => {\n        if (prop !== 'hover' && typeof value === 'string') {\n          acc[prop] = value;\n        }\n        return acc;\n      }, {} as Record<string, string>);\n\n      const handleMouseEnter = () => {\n        Object.entries(hoverStyles).forEach(([prop, value]) => {\n          if (typeof value === 'string') {\n            button.style.setProperty(`--button-${prop}`, value);\n          }\n        });\n      };\n\n      const handleMouseLeave = () => {\n        Object.entries(originalStyles).forEach(([prop, value]) => {\n          button.style.setProperty(`--button-${prop}`, value);\n        });\n      };\n\n      button.addEventListener('mouseenter', handleMouseEnter);\n      button.addEventListener('mouseleave', handleMouseLeave);\n\n      return () => {\n        button.removeEventListener('mouseenter', handleMouseEnter);\n        button.removeEventListener('mouseleave', handleMouseLeave);\n      };\n    }, [variant, size, tokens, finalRef]);\n\n    return (\n      <StyledButton\n        ref={finalRef}\n        $variant={variant}\n        $size={size}\n        $fullWidth={fullWidth}\n        {...props}\n      >\n        {children}\n      </StyledButton>\n    );\n  }\n); ","import { useEffect, useState } from 'react';\nimport { TokenManager, TokenState } from '../utils/mockTokenManager';\n\nexport interface TokenValue {\n  [key: string]: string | TokenValue;\n}\n\nexport interface TokenConfig {\n  [section: string]: TokenValue;\n}\n\nexport function useTokens<T extends { [key: string]: any }>(componentType: string, defaultTokens: T): T {\n  const [tokens, setTokens] = useState<T>(defaultTokens);\n\n  useEffect(() => {\n    const manager = TokenManager.getInstance();\n    const unsubscribe = manager.subscribe(componentType, (state: TokenState) => {\n      // Update tokens if they exist in the state\n      if (state.components[componentType]) {\n        setTokens(state.components[componentType].value as T);\n      }\n    });\n\n    // Preload tokens for this component\n    manager.preloadTokens([componentType]);\n\n    return unsubscribe;\n  }, [componentType]);\n\n  return tokens;\n} ","export interface TokenState {\n  components: {\n    [key: string]: {\n      value: any;\n    };\n  };\n}\n\nexport class TokenManager {\n  private static instance: TokenManager;\n  private subscribers: Map<string, ((state: TokenState) => void)[]>;\n  private state: TokenState;\n\n  private constructor() {\n    this.subscribers = new Map();\n    this.state = {\n      components: {},\n    };\n  }\n\n  static getInstance(): TokenManager {\n    if (!TokenManager.instance) {\n      TokenManager.instance = new TokenManager();\n    }\n    return TokenManager.instance;\n  }\n\n  subscribe(componentType: string, callback: (state: TokenState) => void): () => void {\n    if (!this.subscribers.has(componentType)) {\n      this.subscribers.set(componentType, []);\n    }\n    this.subscribers.get(componentType)?.push(callback);\n\n    // Return unsubscribe function\n    return () => {\n      const callbacks = this.subscribers.get(componentType);\n      if (callbacks) {\n        const index = callbacks.indexOf(callback);\n        if (index > -1) {\n          callbacks.splice(index, 1);\n        }\n      }\n    };\n  }\n\n  preloadTokens(componentTypes: string[]): void {\n    // Mock implementation - does nothing\n  }\n} "]}